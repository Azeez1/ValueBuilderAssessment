import PDFDocument from 'pdfkit';
import type PDFKit from 'pdfkit';
import { AssessmentAnswer, CategoryScore } from '@shared/schema';
import {
  coreDriverDescriptions,
  supplementalDriverDescriptions
} from './reportTemplates';

function generateCategoryDetailPage(
  doc: PDFKit.PDFDocument,
  category: string,
  score: CategoryScore,
  isCore: boolean
) {
  const descriptions = isCore ? coreDriverDescriptions : supplementalDriverDescriptions;
  const details = (descriptions as Record<string, any>)[category];

  if (!details) return;

  // Category header
  doc.fontSize(24).fillColor('#1e40af').text(details.title, 50, 50);

  doc.fontSize(14).fillColor('#6b7280').text(details.subtitle, 50, 80);

  // Score display
  doc.fontSize(48).fillColor(getScoreColor(score.score)).text(`${score.score}`, 450, 50);
  doc.fontSize(16).fillColor('#6b7280').text('/100', 500, 65);

  // Description
  doc
    .fontSize(12)
    .fillColor('#111827')
    .text(details.description, 50, 120, {
      width: 500,
      align: 'justify',
      lineGap: 5
    });

  // Key insights
  doc.fontSize(14).fillColor('#1e40af').text('Key Assessment Areas:', 50, doc.y + 20);

  details.insights.forEach((insight: string) => {
    doc.fontSize(11).fillColor('#374151').text(`• ${insight}`, 70, doc.y + 10, {
      width: 480,
      lineGap: 3
    });
  });

  // Improvement recommendations based on score
  if (score.score < 80) {
    doc.fontSize(14).fillColor('#dc2626').text('Improvement Opportunities:', 50, doc.y + 20);

    const recommendations = getImprovementRecommendation(category, score.score);
    doc
      .fontSize(11)
      .fillColor('#374151')
      .text(recommendations, 50, doc.y + 10, {
        width: 500,
        align: 'justify',
        lineGap: 5
      });
  }
}

export async function generatePDFReport(
  userName: string,
  userEmail: string,
  companyName: string,
  industry: string,
  overallScore: number,
  categoryScores: Record<string, CategoryScore>,
  answers: Record<string, AssessmentAnswer>
): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ size: 'A4', margin: 50, bufferPages: true });
      const buffers: Buffer[] = [];

      doc.on('data', (chunk: Buffer) => buffers.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(buffers)));
      doc.on('error', reject);

      if (!categoryScores || Object.keys(categoryScores).length === 0) {
        doc.text('No assessment data available', 50, 50);
        doc.end();
        return;
      }

      const pageMargin = 50;
      let currentY = pageMargin;

      const addFooter = () => {
        const footerY = doc.page.height - pageMargin + 10;
        doc.fontSize(10).fillColor('#6b7280');
        doc.text(
          `This report is confidential and proprietary to ${companyName || userName}`,
          pageMargin,
          footerY,
          { width: doc.page.width - pageMargin * 2, align: 'center' }
        );
        doc.text(
          `Generated by Value Builder Assessment™ | ${new Date().toISOString()}`,
          { width: doc.page.width - pageMargin * 2, align: 'center' }
        );
        doc.text(
          'For questions, contact: aoseni@duxvitaecapital.com',
          { width: doc.page.width - pageMargin * 2, align: 'center' }
        );
      };

      const checkAndAddPage = (requiredSpace: number) => {
        if (currentY + requiredSpace > doc.page.height - pageMargin) {
          addFooter();
          doc.addPage();
          currentY = pageMargin;
        }
      };

      // Title Page
      doc.fillColor('#1e40af').fontSize(28).text('Value Builder Assessment Report', {
        align: 'center'
      });
      currentY = doc.y + 20;
      doc.fillColor('black').fontSize(16);
      doc.text(`Assessed By: ${userName}`, pageMargin, currentY);
      currentY = doc.y;
      doc.text(`Email: ${userEmail}`);
      currentY = doc.y;
      doc.text(`Company: ${companyName || 'Not Specified'}`);
      currentY = doc.y;
      doc.text(`Industry: ${industry || 'Not Specified'}`);
      currentY = doc.y;
      doc.text(
        `Assessment Date: ${new Date().toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        })}`
      );
      addFooter();
      doc.addPage();
      currentY = pageMargin;

      // Overall Score
      doc.fillColor('#1e40af').fontSize(20).text('Overall Value Builder Score', {
        align: 'center'
      });
      currentY = doc.y + 20;
      doc.fontSize(72).text(`${overallScore}/100`, { align: 'center' });
      currentY = doc.y + 10;
      doc.fontSize(48).text(`Grade: ${getGrade(overallScore)}`, { align: 'center' });
      addFooter();
      doc.addPage();
      currentY = pageMargin;

      // Category Scores
      doc.fillColor('#1e40af').fontSize(20).text('Performance by Category', pageMargin, currentY);
      currentY = doc.y + 20;
      const categories = Object.entries(categoryScores).sort((a, b) => b[1].score - a[1].score);
      const barWidth = doc.page.width - pageMargin * 2;

      for (const [category, score] of categories) {
        checkAndAddPage(30);
        let color = '#10b981';
        if (score.score < 60) color = '#ef4444';
        else if (score.score < 80) color = '#f59e0b';

        doc.fillColor('black').fontSize(16).text(`${category} (${score.score}/100)`, pageMargin, currentY);
        currentY = doc.y + 5;
        doc
          .save()
          .rect(pageMargin, currentY, barWidth, 8)
          .fill('#e5e7eb')
          .restore();
        doc
          .save()
          .fillColor(color)
          .rect(pageMargin, currentY, (barWidth * score.score) / 100, 8)
          .fill()
          .restore();
        currentY += 20;
      }
      addFooter();
      doc.addPage();
      currentY = pageMargin;

      // Areas for Improvement
      const areasForImprovement = Object.entries(categoryScores)
        .filter(([_, s]) => s.score < 60)
        .sort((a, b) => a[1].score - b[1].score);

      if (areasForImprovement.length > 0) {
        doc.fillColor('#1e40af').fontSize(20).text('Priority Areas for Improvement', pageMargin, currentY);
        currentY = doc.y + 10;
        for (const [category, score] of areasForImprovement) {
          const recommendation = getImprovementRecommendation(category, score.score);
          checkAndAddPage(50);
          doc.fillColor('#ef4444').fontSize(16).text(`${category} (Current Score: ${score.score}/100)`, pageMargin, currentY);
          currentY = doc.y + 5;
          doc.fillColor('black').fontSize(12).text(recommendation, pageMargin, currentY, {
            width: barWidth,
            lineGap: 5
          });
          currentY = doc.y + 15;
        }
        addFooter();
        doc.addPage();
        currentY = pageMargin;
      }

      // Strategic Recommendations
      const strategicRecs = getStrategicRecommendations(overallScore, categoryScores);
      doc.fillColor('#1e40af').fontSize(20).text('Strategic Recommendations', pageMargin, currentY);
      currentY = doc.y + 10;
      for (const rec of strategicRecs) {
        checkAndAddPage(20);
        doc.fontSize(12).fillColor('black').text(`• ${rec}`, pageMargin, currentY, {
          width: barWidth,
          lineGap: 5
        });
        currentY = doc.y + 5;
      }

      addFooter();

      const coreDrivers = [
        'Financial Performance',
        'Growth Potential',
        'Switzerland Structure',
        'Valuation Teeter-Totter',
        'Recurring Revenue',
        'Monopoly Control',
        'Customer Satisfaction',
        'Hub & Spoke'
      ];

      const supplementalDrivers = [
        'Financial Health & Analysis',
        'Market & Competitive Position',
        'Operational Excellence',
        'Human Capital & Organization',
        'Legal, Risk & Compliance',
        'Strategic Assets & Intangibles'
      ];

      for (const category of coreDrivers) {
        if (categoryScores[category]) {
          doc.addPage();
          generateCategoryDetailPage(doc, category, categoryScores[category], true);
          addFooter();
        }
      }

      for (const category of supplementalDrivers) {
        if (categoryScores[category]) {
          doc.addPage();
          generateCategoryDetailPage(doc, category, categoryScores[category], false);
          addFooter();
        }
      }

      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}

function getGrade(score: number): string {
  if (score >= 90) return 'A+';
  if (score >= 80) return 'A';
  if (score >= 70) return 'B';
  if (score >= 60) return 'C';
  if (score >= 50) return 'D';
  return 'F';
}

function getImprovementRecommendation(category: string, score: number): string {
  const recommendations: Record<string, string> = {
    'Financial Performance':
      'Consider implementing stronger financial controls, improving profit margins, and establishing more predictable revenue streams.',
    'Growth Potential':
      'Focus on market expansion strategies, product innovation, and developing scalable business processes.',
    'Switzerland Structure':
      'Work on reducing dependencies on key customers, suppliers, or employees. Diversify your risk.',
    'Valuation Teeter-Totter':
      'Strengthen your competitive position and build sustainable advantages in your market.',
    'Recurring Revenue':
      'Develop subscription models, long-term contracts, or membership programs to increase predictable revenue.',
    'Monopoly Control':
      'Build stronger barriers to entry, protect intellectual property, and increase pricing power.',
    'Customer Satisfaction': 'Implement customer feedback systems, improve service quality, and track NPS scores.',
    'Hub & Spoke':
      'Reduce owner dependence by building strong management teams and documenting all processes.',
    'Financial Health & Analysis':
      'Strengthen balance sheet, improve cash flow management, and enhance financial reporting.',
    'Market & Competitive Position':
      'Analyze competitive landscape, identify market opportunities, and strengthen positioning.',
    'Operational Excellence':
      'Optimize processes, implement quality systems, and improve operational efficiency.',
    'Human Capital & Organization':
      'Invest in employee development, improve retention, and build strong organizational culture.',
    'Legal, Risk & Compliance': 'Review legal structures, enhance compliance systems, and mitigate business risks.',
    'Strategic Assets & Intangibles': 'Protect and leverage intellectual property, brand value, and strategic relationships.'
  };

  return recommendations[category] || 'Focus on systematic improvements in this area to increase business value.';
}

function getStrategicRecommendations(
  overallScore: number,
  categoryScores: Record<string, CategoryScore>
): string[] {
  const items: string[] = [];

  if (overallScore < 60) {
    items.push('Your business has significant opportunities for value improvement. Focus on the lowest-scoring areas first.');
    items.push('Consider engaging a business advisor to help develop a comprehensive improvement plan.');
  } else if (overallScore < 80) {
    items.push('Your business shows good potential. Targeted improvements in key areas can significantly increase value.');
    items.push('Prioritize 2-3 improvement areas and develop 90-day action plans for each.');
  } else {
    items.push('Your business is performing well. Focus on maintaining strengths while addressing any remaining gaps.');
    items.push('Consider strategic initiatives to move from good to exceptional in your strongest areas.');
  }

  const recurringRevScore = categoryScores['Recurring Revenue']?.score || 0;
  if (recurringRevScore < 60) {
    items.push('Urgently develop recurring revenue streams to improve business predictability and value.');
  }

  const hubSpokeScore = categoryScores['Hub & Spoke']?.score || 0;
  if (hubSpokeScore < 60) {
    items.push('Reduce owner dependence by developing management systems and key employee capabilities.');
  }

  return items;
}

function getScoreColor(score: number): string {
  if (score >= 80) return '#10b981';
  if (score >= 60) return '#f59e0b';
  return '#ef4444';
}

